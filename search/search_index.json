{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Telemetrix Project A User's Guide Telemetry is a system for collecting data on a remote device and then automatically transmitting the collected data back to local receiving equipment for processing. The Telemetrix Project is a telemetry system explicitly designed for Arduino Core-based MCUs, using Python on the local client and an Arduino Core sketch on the Microcontroller Unit (MCU). Two clients are offered, telemetrix , which uses standard Python threading techniques for concurrency, and telemetrix-aio for those who prefer to work within a Python asyncio environment. The server, Telemetrix4Arduino , is written using standard Arduino C++. It is in an Arduino library format, but all the operational code is located in a single .ino file, simplifying adding an extension. Telemetrix was designed with extensibility in mind. Adding new functionality is straight forward. Debugging tools are integrated into the system aid in extending its functionality. This guide includes a tutorial explaining the steps taken to add DHT (temperature and humidity) sensor support to Telemetrix. The tutorial covers both telemetrix and telemetrix-aio. Summary Of Major Features Applications are programmed using conventional Python 3. All Data change events are reported asynchronously via user registered callback functions. Each data change event is time-stamped. Online API Reference Documentation for Telemetrix . Online API Reference Documentation for Telemetrix-AIO . A full set of working examples for Telemetrix and Telemetrix-AIO are available for download online. Both clients utilize a common Arduino Sketch, Telemetrix4Arduino . Integrated debugging methods are included to aid in adding new features. Intuitive And Easy To use APIs For example, to receive asynchronous digital pin state data change notifications, you do the following: Set a pin mode for the pin and register an associated callback function for the pin . Your callback function is written to accept a single parameter: def the_callback(data): # Your code here When the telemetrix client calls the callback function, it populates the data parameter with a list describing the data change event. For example, for a digital data change, the list would contain the following: [pin_type=digital input, pin_number, pin_value, time stamp] Each input pin type returns a unique list, as described in the API. Have your application sit in a loop waiting for notifications. Working Examples Here is a Telemetrix example that monitors digital pin 12 for state changes: import sys import time from telemetrix import telemetrix \"\"\" Monitor a digital input pin \"\"\" \"\"\" Setup a pin for digital input and monitor its changes \"\"\" # Setup a pin for analog input and monitor its changes DIGITAL_PIN = 12 # arduino pin number # Callback data indices CB_PIN_MODE = 0 CB_PIN = 1 CB_VALUE = 2 CB_TIME = 3 def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) print(f'Pin Mode: {data[CB_PIN_MODE]} Pin: {data[CB_PIN]} Value: {data[CB_VALUE]} Time Stamp: {date}') def digital_in(my_board, pin): \"\"\" This function establishes the pin as a digital input. Any changes on this pin will be reported through the call back function. :param my_board: a pymata4 instance :param pin: Arduino pin number \"\"\" # set the pin mode my_board.set_pin_mode_digital_input(pin, callback=the_callback) print('Enter Control-C to quit.') # my_board.enable_digital_reporting(12) try: while True: time.sleep(.0001) except KeyboardInterrupt: board.shutdown() sys.exit(0) board = telemetrix.Telemetrix() try: digital_in(board, DIGITAL_PIN) except KeyboardInterrupt: board.shutdown() sys.exit(0) And a Telemetrix-AIO version of the same example: import asyncio import sys import time from telemetrix_aio import telemetrix_aio \"\"\" Monitor a digital input pin \"\"\" \"\"\" Setup a pin for digital input and monitor its changes \"\"\" # Setup a pin for analog input and monitor its changes DIGITAL_PIN = 12 # arduino pin number # Callback data indices CB_PIN_MODE = 0 CB_PIN = 1 CB_VALUE = 2 CB_TIME = 3 async def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin_mode, pin, current reported value, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) print(f'Pin: {data[CB_PIN]} Value: {data[CB_VALUE]} Time Stamp: {date}') async def digital_in(my_board, pin): \"\"\" This function establishes the pin as a digital input. Any changes on this pin will be reported through the call back function. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" # set the pin mode await my_board.set_pin_mode_digital_input(pin, callback=the_callback) while True: try: await asyncio.sleep(.001) except KeyboardInterrupt: await board.shutdown() sys.exit(0) # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = telemetrix_aio.TelemetrixAIO() try: # start the main function loop.run_until_complete(digital_in(board, 12)) except (KeyboardInterrupt, RuntimeError) as e: loop.run_until_complete(board.shutdown()) sys.exit(0) Sample console output as input change events occur: Pin: 12 Value: 0 Time Stamp: 2020-03-10 13:26:22 Pin: 12 Value: 1 Time Stamp: 2020-03-10 13:26:27 Copyright (C) 2020 Alan Yorinks. All Rights Reserved. Last updated 09 November 2020","title":"Introduction"},{"location":"#summary-of-major-features","text":"Applications are programmed using conventional Python 3. All Data change events are reported asynchronously via user registered callback functions. Each data change event is time-stamped. Online API Reference Documentation for Telemetrix . Online API Reference Documentation for Telemetrix-AIO . A full set of working examples for Telemetrix and Telemetrix-AIO are available for download online. Both clients utilize a common Arduino Sketch, Telemetrix4Arduino . Integrated debugging methods are included to aid in adding new features.","title":"Summary Of Major Features"},{"location":"#intuitive-and-easy-to-use-apis","text":"For example, to receive asynchronous digital pin state data change notifications, you do the following: Set a pin mode for the pin and register an associated callback function for the pin . Your callback function is written to accept a single parameter: def the_callback(data): # Your code here When the telemetrix client calls the callback function, it populates the data parameter with a list describing the data change event. For example, for a digital data change, the list would contain the following: [pin_type=digital input, pin_number, pin_value, time stamp] Each input pin type returns a unique list, as described in the API. Have your application sit in a loop waiting for notifications.","title":"Intuitive And Easy To use APIs"},{"location":"#working-examples","text":"Here is a Telemetrix example that monitors digital pin 12 for state changes: import sys import time from telemetrix import telemetrix \"\"\" Monitor a digital input pin \"\"\" \"\"\" Setup a pin for digital input and monitor its changes \"\"\" # Setup a pin for analog input and monitor its changes DIGITAL_PIN = 12 # arduino pin number # Callback data indices CB_PIN_MODE = 0 CB_PIN = 1 CB_VALUE = 2 CB_TIME = 3 def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) print(f'Pin Mode: {data[CB_PIN_MODE]} Pin: {data[CB_PIN]} Value: {data[CB_VALUE]} Time Stamp: {date}') def digital_in(my_board, pin): \"\"\" This function establishes the pin as a digital input. Any changes on this pin will be reported through the call back function. :param my_board: a pymata4 instance :param pin: Arduino pin number \"\"\" # set the pin mode my_board.set_pin_mode_digital_input(pin, callback=the_callback) print('Enter Control-C to quit.') # my_board.enable_digital_reporting(12) try: while True: time.sleep(.0001) except KeyboardInterrupt: board.shutdown() sys.exit(0) board = telemetrix.Telemetrix() try: digital_in(board, DIGITAL_PIN) except KeyboardInterrupt: board.shutdown() sys.exit(0) And a Telemetrix-AIO version of the same example: import asyncio import sys import time from telemetrix_aio import telemetrix_aio \"\"\" Monitor a digital input pin \"\"\" \"\"\" Setup a pin for digital input and monitor its changes \"\"\" # Setup a pin for analog input and monitor its changes DIGITAL_PIN = 12 # arduino pin number # Callback data indices CB_PIN_MODE = 0 CB_PIN = 1 CB_VALUE = 2 CB_TIME = 3 async def the_callback(data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value and the date and time when the change occurred :param data: [pin_mode, pin, current reported value, timestamp] \"\"\" date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME])) print(f'Pin: {data[CB_PIN]} Value: {data[CB_VALUE]} Time Stamp: {date}') async def digital_in(my_board, pin): \"\"\" This function establishes the pin as a digital input. Any changes on this pin will be reported through the call back function. :param my_board: a pymata_express instance :param pin: Arduino pin number \"\"\" # set the pin mode await my_board.set_pin_mode_digital_input(pin, callback=the_callback) while True: try: await asyncio.sleep(.001) except KeyboardInterrupt: await board.shutdown() sys.exit(0) # get the event loop loop = asyncio.get_event_loop() # instantiate pymata_express board = telemetrix_aio.TelemetrixAIO() try: # start the main function loop.run_until_complete(digital_in(board, 12)) except (KeyboardInterrupt, RuntimeError) as e: loop.run_until_complete(board.shutdown()) sys.exit(0) Sample console output as input change events occur: Pin: 12 Value: 0 Time Stamp: 2020-03-10 13:26:22 Pin: 12 Value: 1 Time Stamp: 2020-03-10 13:26:27 Copyright (C) 2020 Alan Yorinks. All Rights Reserved. Last updated 09 November 2020","title":"Working Examples"},{"location":"about/","text":"REPORTING ISSUES If you wish to report an issue with telemetrix, please use this link . For telemetrix-aio, you can enter an issue using this link For Telemetrix4Arduino, please use this link . When filing an issue, please provide any console output, a description of the issue, and sample code demonstrating the problem. TROUBLESHOOTING TIPS Powering both Arduino connected devices (such as motors) and the Arduino micro-controller from your computer's USB connector may exceed the maximum current capabilities of the USB port. In those cases, use a separate power supply for the connected device. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"About"},{"location":"about/#reporting-issues","text":"If you wish to report an issue with telemetrix, please use this link . For telemetrix-aio, you can enter an issue using this link For Telemetrix4Arduino, please use this link . When filing an issue, please provide any console output, a description of the issue, and sample code demonstrating the problem.","title":"REPORTING ISSUES"},{"location":"about/#troubleshooting-tips","text":"Powering both Arduino connected devices (such as motors) and the Arduino micro-controller from your computer's USB connector may exceed the maximum current capabilities of the USB port. In those cases, use a separate power supply for the connected device. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"TROUBLESHOOTING TIPS"},{"location":"contents/","text":"What You Will Find In This Document Installation and system requirements: Verifying The Python 3 Version. Python 3 Installation Instructions. Installing telemtrix or telemetrix-aio . Installing the Telemetrix4Arduino sketch. A discussion of the API methods , including links to working examples. A tutorial on how to extend Telemetrix and Telemetrix-AIO using the DHTNew library for DHT type temperature sensors. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"What Is Contained In This Guide?"},{"location":"contents/#what-you-will-find-in-this-document","text":"Installation and system requirements: Verifying The Python 3 Version. Python 3 Installation Instructions. Installing telemtrix or telemetrix-aio . Installing the Telemetrix4Arduino sketch. A discussion of the API methods , including links to working examples. A tutorial on how to extend Telemetrix and Telemetrix-AIO using the DHTNew library for DHT type temperature sensors. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"What You Will Find In This Document"},{"location":"debug/","text":"Debugging Aids Because the telemetrix and telemetrix-aio packages utilize serial communication between the client and the server, it can be difficult to debug the interaction between the two. Two methods have been provided to aid in debugging. loopback This method allows you to check that there is serial communication between the client and the server. def loop_back(self, start_character, callback=None) This is a debugging method to send a character to the Arduino device, and have the device loop it back. :param start_character: The character to loop back. It should be an integer. :param callback: Looped back character will appear in the callback method Examples: telemtrix: loopback.py telemtrix-aio: loopback.py send_debug_info reports There are times when you wish to view values on the Arduino server. There is a C++ function built into Telemetrix4Arduino, allowing you to send a byte and an integer to be viewed on the Python console. void send_debug_info(byte id, int value) The report is formatted as follows: DEBUG ID: byte_id Value: int_value Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Debugging"},{"location":"debug/#debugging-aids","text":"Because the telemetrix and telemetrix-aio packages utilize serial communication between the client and the server, it can be difficult to debug the interaction between the two. Two methods have been provided to aid in debugging.","title":"Debugging Aids"},{"location":"debug/#loopback","text":"This method allows you to check that there is serial communication between the client and the server. def loop_back(self, start_character, callback=None) This is a debugging method to send a character to the Arduino device, and have the device loop it back. :param start_character: The character to loop back. It should be an integer. :param callback: Looped back character will appear in the callback method Examples: telemtrix: loopback.py telemtrix-aio: loopback.py","title":"loopback"},{"location":"debug/#send_debug_info-reports","text":"There are times when you wish to view values on the Arduino server. There is a C++ function built into Telemetrix4Arduino, allowing you to send a byte and an integer to be viewed on the Python console. void send_debug_info(byte id, int value) The report is formatted as follows: DEBUG ID: byte_id Value: int_value Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"send_debug_info reports"},{"location":"device_writes/","text":"Setting Pin and Device Values In this section, we discuss writing data to: Digital pins. Digital pin PWM output (Analog Write). Servo motors. Note: I2C devices are discussed in the next section of this guide. analog_write def analog_write(self, pin, value) Set the specified pin to the specified value. :param pin: arduino pin number :param value: pin value (0-255) Examples: telemetrix: fade telemetrix-aio: fade digital_write def digital_write(self, pin, value) Set the specified pin to the specified value. :param pin: arduino pin number :param value: pin value (1 or 0) Examples: telemetrix: blink telemetrix-aio: blink servo_write def servo_write(self, pin_number, angle) Set a servo attached to a pin to a given angle. :param pin_number: pin :param angle: angle (0-180) Examples: telemetrix: servo telemetrix-aio: servo Notes: For an angular servo, the position parameter is set between 0 and 180 (degrees). For a continuous servo, 0 is full-speed in one direction, 180 is full speed in the other, and a value near 90 is no movement. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Writing Values To Pins And Selected Devices"},{"location":"device_writes/#setting-pin-and-device-values","text":"In this section, we discuss writing data to: Digital pins. Digital pin PWM output (Analog Write). Servo motors. Note: I2C devices are discussed in the next section of this guide.","title":"Setting Pin and Device Values"},{"location":"device_writes/#analog_write","text":"def analog_write(self, pin, value) Set the specified pin to the specified value. :param pin: arduino pin number :param value: pin value (0-255) Examples: telemetrix: fade telemetrix-aio: fade","title":"analog_write"},{"location":"device_writes/#digital_write","text":"def digital_write(self, pin, value) Set the specified pin to the specified value. :param pin: arduino pin number :param value: pin value (1 or 0) Examples: telemetrix: blink telemetrix-aio: blink","title":"digital_write"},{"location":"device_writes/#servo_write","text":"def servo_write(self, pin_number, angle) Set a servo attached to a pin to a given angle. :param pin_number: pin :param angle: angle (0-180) Examples: telemetrix: servo telemetrix-aio: servo Notes: For an angular servo, the position parameter is set between 0 and 180 (degrees). For a continuous servo, 0 is full-speed in one direction, 180 is full speed in the other, and a value near 90 is no movement. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"servo_write"},{"location":"dht/","text":"A Use Case - The DHT 22 Sensor The Telemetrix Project comes pre-packaged with support for a fixed set of sensors and actuators. But, what if you want to add support for something outside of the base set? In this section, you will learn how to add custom support for a sensor or actuator of your choosing. We will be using the DHT 22 temperature/humidity sensor to illustrate how to extend the Telemetrix Project's capabilities for discussion purposes. The Command And Reporter Packets The Telemetrix clients and server communicate by exchanging data packets over the serial link. The data packets originating from the client are called command packets. The data packets originating from the server are called reporter packets. The format for both command and reporter packets is the same. The packet length and packet ID portions of the packet are each one byte in length. The total payload length is of variable size. The packet length byte represents the total length in bytes of the payload section of the packet. Note that the length does not include the packet length byte. When Telemetrix4Arduino receives a command in the get_next_command function, all of the bytes that follow the payload ID are placed into a command_buffer for processing. When a Telemetrix client receives a report, the _reporter method also places all of the bytes following the payload ID into the response_data buffer for processing. Coping With Various Data Types With A Byte-Oriented Serial Link When data is sent across the serial link, it is sent as a series of bytes. Some data types, such as integers and floating-point values, are larger than a single byte. For the Telemetrix Project, an integer value is two bytes in length, and a floating-point value is four bytes in length. When sending a value larger than a byte in length, the multi-byte values are disassembled into individual bytes before transmission. When received, the individual bytes are reassembled into the original multi-byte value. For all data items that must be represented in this manner, by convention, the most significant byte is the first byte transmitted, followed by all subsequent bytes in descending byte order. For example, the DHT 22 sensor expresses temperature and humidity values as floating-point. To send a report containing these values to the client, they must first be converted to individual bytes. Using humidity as an example, let's see how this is done: // get humidity dht_data = dhts[i].dht_sensor->getHumidity(); memcpy(&report_message[4], &dht_data, sizeof dht_data); The humidity is retrieved by calling the DHTNEW method, getHumdity . The floating-point value returned in dht_data is converted to bytes, by using the memcpy function. In the example above, the bytes are copied into a report_message buffer in MSB order. On the client side, the converted bytes need to be reassembled into floats before providing the data values to the user application. f_humidity = bytearray(data[2:6]) f_temperature = bytearray(data[6:]) message = [PrivateConstants.DHT_REPORT, data[0], data[1], (struct.unpack('<f', f_humidity))[0], (struct.unpack('<f', f_temperature))[0], time.time()] In the example above, the humidity and temperature values are first extracted from the incoming report as bytearrays. Then using the Python struct library, the bytearrays are reassembled into their original floating-point values. Preparing For The New Extension Before jumping directly into coding, there are a few things you should consider when designing your extension. Review the library's API to select the methods you wish to support. You may support the full set of library functions or a subset. For this example, only the minimum functions will be supported to help keep things as simple as possible. The library chosen for the DHT is the dhtnew library . Determine if there is a time constraint on how often a device can be accessed. The DHT 22, for example, can only be read every 2 seconds to receive valid data. We will demonstrate how to support this restriction in a non-blocking manner.** Determine the number of instances of the device you wish to support. For the DHT 22, up to six devices are supported. Implementing The New Extension Below are the steps used for adding the DHT extension. We will use the telemetrix client for illustration purposes. Modifying telemetrix-aio would take a similar approach. Each step will be discussed in detail in the following sections. The assumption is that the new extension will ultimately result in continuous report generation without any additional API calls. Your device may have different requirements, and you will need to adjust things for your particular case. Add a new client command to be transmitted to the server. Add a new command handler on the server to process the command. Add a new function to the server to continuously monitor the device and generate data reports. Add a new function to the client to handle the new incoming reports. Adding A New Client Command 1. Define A New Command Value To add a new command to the API, define a new command value in private_constants.py . class PrivateConstants: \"\"\" This class contains a set of constants for telemetrix internal use . \"\"\" # commands # send a loop back request - for debugging communications LOOP_COMMAND = 0 SET_PIN_MODE = 1 # set a pin to INPUT/OUTPUT/PWM/etc DIGITAL_WRITE = 2 # set a single digital pin value instead of entire port ANALOG_WRITE = 3 MODIFY_REPORTING = 4 GET_FIRMWARE_VERSION = 5 ARE_U_THERE = 6 # Arduino ID query for auto-detect of telemetrix connected boards SERVO_ATTACH = 7 SERVO_WRITE = 8 SERVO_DETACH = 9 I2C_BEGIN = 10 I2C_READ = 11 I2C_WRITE = 12 SONAR_NEW = 13 DHT_NEW = 14 #<-----------New Command For the DHT!!!!!!!!!!!!! STOP_ALL_REPORTS = 15 SET_ANALOG_SCANNING_INTERVAL = 16 Here the command DHT_NEW was added. 2. Define the maximum number of DHT devices to be supported. Add this value to private_contants.py # Maximum number of dht devices allowed MAX_DHTS = 6 3. Add storage to telemetrix.py to keeps track of the number of currently active DHT devices and their associated callback functions. self.dht_callbacks = {} self.dht_count = 0 The dht_callbacks dictionary uses the pin number for the DHT device as a key to retrieve its associated callback function. The dht_count variable keeps track of the currently active DHT devices. 4. Add a command method to telemetrix.py to command the server to add a new DHT device. def set_pin_mode_dht(self, pin, callback=None): \"\"\" :param pin: connection pin :param callback: callback function Error Callback: [Callback 0=DHT REPORT, DHT_ERROR=0, PIN, Error Number, Time] Valid Data Callback: Callback 0=DHT REPORT, DHT_DATA=1, PIN, Humidity, Temperature Time] \"\"\" if not callback: if self.shutdown_on_exception: self.shutdown() raise RuntimeError('set_pin_mode_dht: A Callback must be specified') if self.dht_count < PrivateConstants.MAX_DHTS - 1: self.dht_callbacks[pin] = callback self.dht_count += 1 command = [PrivateConstants.DHT_NEW, pin] self._send_command(command) else: if self.shutdown_on_exception: self.shutdown() raise RuntimeError(f'Maximum Number Of DHTs Exceeded - set_pin_mode_dht fails for pin {pin}') The name set_pin_mode_dht, was chosen to stay consistent with the telemetrix naming conventions. Because DHT devices generate reports, we ensure that the user specifies a callback function for the device. The callback is added to dht_callbacks, and the number of active DHT devices is incremented. If the maximum number of DHT devices is exceeded, a RuntimeError is raised. Otherwise, a command data packet is built and sent to the server. NOTE: The _send_command method will automatically calculate the packet length and append it to the packet. Adding A New Server Command Handler 1. Add the library to the list of #includes #include <Arduino.h> #include \"Telemetrix4Arduino.h\" #include <Servo.h> #include <Ultrasonic.h> #include <Wire.h> #include <dhtnew.h> // Adding dhtnew 2. Create A Name For The New Command Handler Function And Declare It As Extern // Create forward references for all the command handlers. // If you add a new command, you must add the command handler // here as well. extern void serial_loopback(); extern void set_pin_mode(); extern void digital_write(); extern void analog_write(); extern void modify_reporting(); extern void get_firmware_version(); extern void are_you_there(); extern void servo_attach(); extern void servo_write(); extern void servo_detach(); extern void i2c_begin(); extern void i2c_read(); extern void i2c_write(); extern void sonar_new(); extern void dht_new(); // The New Command Handler extern void stop_all_reports(); extern void set_analog_scanning_interval(); 3. Define A Value For The Command That Matches The Value Defined In The Client // Commands -received by this sketch // Add commands retaining the sequential numbering. // The order of commands here must be maintained in the command_table. #define SERIAL_LOOP_BACK 0 #define SET_PIN_MODE 1 #define DIGITAL_WRITE 2 #define ANALOG_WRITE 3 #define MODIFY_REPORTING 4 // mode(all, analog, or digital), pin, enable or disable #define GET_FIRMWARE_VERSION 5 #define ARE_U_THERE 6 #define SERVO_ATTACH 7 #define SERVO_WRITE 8 #define SERVO_DETACH 9 #define I2C_BEGIN 10 #define I2C_READ 11 #define I2C_WRITE 12 #define SONAR_NEW 13 #define DHT_NEW 14 // The Command value #define STOP_ALL_REPORTS 15 #define SET_ANALOG_SCANNING_INTERVAL 16 4. Update The Command Table With The New Command The data structures are provided below. To update the table, increase the size of the command_table to accept the new command. The command_table contains pointers to the command functions. Note that you may optionally specify the command without the & operator. The compiler interprets the entry the same way in both cases. The command value defined above, the value 14 for DHTNEW, acts as an index into the command_table when fetching the function pointer. Make sure to order the command_table appropriately. // When adding a new command update the command_table. // The command length is the number of bytes that follow // the command byte itself, and does not include the command // byte in its length. // The command_func is a pointer the command's function. struct command_descriptor { // a pointer to the command processing function void (*command_func)(void); }; // An array of pointers to the command functions // If you add new commands, make sure to extend the siz of this // array. command_descriptor command_table[17] = { {&serial_loopback}, {&set_pin_mode}, {&digital_write}, {&analog_write}, {&modify_reporting}, {&get_firmware_version}, {&are_you_there}, {&servo_attach}, {&servo_write}, {&servo_detach}, {&i2c_begin}, {&i2c_read}, {&i2c_write}, {&sonar_new}, {dht_new}, // The new function {stop_all_reports}, {set_analog_scanning_interval} }; 5. Create An Array Of DHT Descriptor Structures To Support The Feature #define MAX_DHTS 6 // max number of devices // DHT Descriptor struct DHT { uint8_t pin; unsigned int last_value; // this value is reserved for future use // if a report should be generated DHTNEW *dht_sensor; }; // an array of dht descriptor objects DHT dhts[MAX_DHTS]; byte dht_index = 0; // index into the dhts array 6. Create The Command Handler Function /*********************************** * DHT adding a new device **********************************/ void dht_new() { int d_read; // report consists of: // 0 - byte count // 1 - report type // 2 - dht report subtype // 3 - pin number // 4 - error value // pre-build an error report in case of a read error byte report_message[5] = {4, (byte)DHT_REPORT, (byte)DHT_READ_ERROR, (byte)0, (byte)0}; dhts[dht_index].dht_sensor = new DHTNEW((uint8_t)command_buffer[0]); dhts[dht_index].dht_sensor->setType(); dhts[dht_index].pin = command_buffer[0]; d_read = dhts[dht_index].dht_sensor->read(); // if read return == zero it means no errors. if (d_read == 0) { dht_index++; } else { // error found // send report and release the dht object report_message[3] = command_buffer[0]; // pin number report_message[4] = d_read; Serial.write(report_message, 5); delete (dhts[dht_index].dht_sensor); } } When a DHT is added, a read is performed to see if there are any issues with the device. If the read returns a zero, then there are no issues and nothing to report. However, a non-zero value is an error indicator. The error value is returned as a report. Add A New Server Function To Continuously Monitor The Device 1. Create A Device Scanner Function For Active DHT Devices We are going to create the scan_dhts scanning function and then call the function in the loop section of the sketch. The scan_dhts function prebuilds a report_message buffer assuming that the read will return valid data. The format for the report is shown in the comments for the function. For valid data, the floating-point values are copied to the buffer as bytes, and a report is sent across the link. If an error is returned as a result of the read, byte 2 of the report, the report sub-type is changed from DHT_DATA to DHT_ERROR, and the packet length is changed to a value of 4 bytes. The report is then sent across the serial link. void scan_dhts() { // prebuild report for valid data // reuse the report if a read command fails // data returned is in floating point form - 4 bytes // each for humidity and temperature // byte 0 = packet length // byte 1 = report type // byte 2 = report sub type - DHT_DATA or DHT_ERROR // btye 3 = pin number // byte 4 = humidity high order byte for data or error value // byte 5 = humidity byte 2 // byte 6 = humidity byte 3 // byte 7 = humidity byte 4 // byte 8 = temperature high order byte for data or // byte 9 = temperature byte 2 // byte 10 = temperature byte 3 // byte 11 = temperature byte 4 byte report_message[12] = {11, DHT_REPORT, DHT_DATA, 0, 0, 0, 0, 0, 0, 0, 0, 0}; byte d_read; float dht_data; // are there any dhts to read? if (dht_index) { // is it time to do the read? This should occur every 2 seconds dht_current_millis = millis(); if (dht_current_millis - dht_previous_millis > dht_scan_interval) { // update for the next scan dht_previous_millis += dht_scan_interval; // read and report all the dht sensors for (int i = 0; i < dht_index; i++) { report_message[3] = dhts[i].pin; // get humidity dht_data = dhts[i].dht_sensor->getHumidity(); memcpy(&report_message[4], &dht_data, sizeof dht_data); // get temperature dht_data = dhts[i].dht_sensor->getTemperature(); memcpy(&report_message[8], &dht_data, sizeof dht_data); Serial.write(report_message, 12); // now read do a read for this device for next go around d_read = dhts[i].dht_sensor->read(); if (d_read) { // error found // send report //send_debug_info(1, 1); report_message[0] = 4; report_message[1] = DHT_REPORT; report_message[2] = DHT_READ_ERROR; report_message[3] = dhts[i].pin; // pin number report_message[4] = d_read; Serial.write(report_message, 5); } } } } } 2. Scan The Active DHT Sensors In The Sketch Loop Function void loop() { // keep processing incoming commands get_next_command(); if(! stop_reports){ // stop reporting scan_digital_inputs(); scan_analog_inputs(); scan_sonars(); scan_dhts(); scan the active DHT sensors. } } Add a New Client Report Handler 1. Add An Entry For The DHT Report To The Report Dispatch Dictionary The report_dispatch dictionary uses report ID values as a key to look up the handler for the incoming report. The dictionary update method is used when adding a new entry into the dispatch dictionary. # The report_dispatch dictionary is used to process # incoming report messages by looking up the report message # and executing its associated processing method. self.report_dispatch = {} # To add a command to the command dispatch table, append here. self.report_dispatch.update({PrivateConstants.LOOP_COMMAND: self._report_loop_data}) self.report_dispatch.update({PrivateConstants.DEBUG_PRINT: self._report_debug_data}) self.report_dispatch.update({PrivateConstants.DIGITAL_REPORT: self._digital_message}) self.report_dispatch.update({PrivateConstants.ANALOG_REPORT: self._analog_message}) self.report_dispatch.update({PrivateConstants.FIRMWARE_REPORT: self._firmware_message}) self.report_dispatch.update({PrivateConstants.I_AM_HERE_REPORT: self._i_am_here}) self.report_dispatch.update({PrivateConstants.SERVO_UNAVAILABLE: self._servo_unavailable}) self.report_dispatch.update({PrivateConstants.I2C_READ_REPORT: self._i2c_read_report}) self.report_dispatch.update({PrivateConstants.I2C_TOO_FEW_BYTES_RCVD: self._i2c_too_few}) self.report_dispatch.update({PrivateConstants.I2C_TOO_MANY_BYTES_RCVD: self._i2c_too_many}) self.report_dispatch.update({PrivateConstants.SONAR_DISTANCE: self._sonar_distance_report}) self.report_dispatch.update({PrivateConstants.DHT_REPORT: self._dht_report}) 2. Create The Report Handler This function builds a report, and looks up the callback function for the DHT device using the reported pin number as the key and calls the callback function. def _dht_report(self, data): \"\"\" This is the dht report handler method. :param data: data[0] = report sub type - DHT_DATA or DHT_ERROR data[1] = pin number data[2] = humidity high order byte or error value if DHT_ERROR data[3] = humidity byte 2 data[4] = humidity byte 3 data[5] = humidity byte 4 data[6] = temperature high order byte for data data[7] = temperature byte 2 data[8] = temperature byte 3 data[9] = temperature byte 4 \"\"\" if data[0]: # DHT_ERROR # error report # data[0] = report sub type, data[1] = pin, data[2] = error message if self.dht_callbacks[data[1]]: # Callback 0=DHT REPORT, DHT_ERROR=0, PIN, Error Number, Time message = [PrivateConstants.DHT_REPORT, data[0], data[1], data[2], time.time()] self.dht_callbacks[data[1]](message) else: # got valid data DHT_DATA f_humidity = bytearray(data[2:6]) f_temperature = bytearray(data[6:]) message = [PrivateConstants.DHT_REPORT, data[0], data[1], (struct.unpack('<f', f_humidity))[0], (struct.unpack('<f', f_temperature))[0], time.time()] self.dht_callbacks[data[1]](message)","title":"Extentending Telemetrix"},{"location":"dht/#a-use-case-the-dht-22-sensor","text":"The Telemetrix Project comes pre-packaged with support for a fixed set of sensors and actuators. But, what if you want to add support for something outside of the base set? In this section, you will learn how to add custom support for a sensor or actuator of your choosing. We will be using the DHT 22 temperature/humidity sensor to illustrate how to extend the Telemetrix Project's capabilities for discussion purposes.","title":"A Use Case - The DHT 22 Sensor"},{"location":"dht/#the-command-and-reporter-packets","text":"The Telemetrix clients and server communicate by exchanging data packets over the serial link. The data packets originating from the client are called command packets. The data packets originating from the server are called reporter packets. The format for both command and reporter packets is the same. The packet length and packet ID portions of the packet are each one byte in length. The total payload length is of variable size. The packet length byte represents the total length in bytes of the payload section of the packet. Note that the length does not include the packet length byte. When Telemetrix4Arduino receives a command in the get_next_command function, all of the bytes that follow the payload ID are placed into a command_buffer for processing. When a Telemetrix client receives a report, the _reporter method also places all of the bytes following the payload ID into the response_data buffer for processing.","title":"The Command And Reporter Packets"},{"location":"dht/#coping-with-various-data-types-with-a-byte-oriented-serial-link","text":"When data is sent across the serial link, it is sent as a series of bytes. Some data types, such as integers and floating-point values, are larger than a single byte. For the Telemetrix Project, an integer value is two bytes in length, and a floating-point value is four bytes in length. When sending a value larger than a byte in length, the multi-byte values are disassembled into individual bytes before transmission. When received, the individual bytes are reassembled into the original multi-byte value. For all data items that must be represented in this manner, by convention, the most significant byte is the first byte transmitted, followed by all subsequent bytes in descending byte order. For example, the DHT 22 sensor expresses temperature and humidity values as floating-point. To send a report containing these values to the client, they must first be converted to individual bytes. Using humidity as an example, let's see how this is done: // get humidity dht_data = dhts[i].dht_sensor->getHumidity(); memcpy(&report_message[4], &dht_data, sizeof dht_data); The humidity is retrieved by calling the DHTNEW method, getHumdity . The floating-point value returned in dht_data is converted to bytes, by using the memcpy function. In the example above, the bytes are copied into a report_message buffer in MSB order. On the client side, the converted bytes need to be reassembled into floats before providing the data values to the user application. f_humidity = bytearray(data[2:6]) f_temperature = bytearray(data[6:]) message = [PrivateConstants.DHT_REPORT, data[0], data[1], (struct.unpack('<f', f_humidity))[0], (struct.unpack('<f', f_temperature))[0], time.time()] In the example above, the humidity and temperature values are first extracted from the incoming report as bytearrays. Then using the Python struct library, the bytearrays are reassembled into their original floating-point values.","title":"Coping With Various Data Types With A Byte-Oriented Serial Link"},{"location":"dht/#preparing-for-the-new-extension","text":"Before jumping directly into coding, there are a few things you should consider when designing your extension. Review the library's API to select the methods you wish to support. You may support the full set of library functions or a subset. For this example, only the minimum functions will be supported to help keep things as simple as possible. The library chosen for the DHT is the dhtnew library . Determine if there is a time constraint on how often a device can be accessed. The DHT 22, for example, can only be read every 2 seconds to receive valid data. We will demonstrate how to support this restriction in a non-blocking manner.** Determine the number of instances of the device you wish to support. For the DHT 22, up to six devices are supported.","title":"Preparing For The New Extension"},{"location":"dht/#implementing-the-new-extension","text":"Below are the steps used for adding the DHT extension. We will use the telemetrix client for illustration purposes. Modifying telemetrix-aio would take a similar approach. Each step will be discussed in detail in the following sections. The assumption is that the new extension will ultimately result in continuous report generation without any additional API calls. Your device may have different requirements, and you will need to adjust things for your particular case. Add a new client command to be transmitted to the server. Add a new command handler on the server to process the command. Add a new function to the server to continuously monitor the device and generate data reports. Add a new function to the client to handle the new incoming reports.","title":"Implementing The New Extension"},{"location":"dht/#adding-a-new-client-command","text":"1. Define A New Command Value To add a new command to the API, define a new command value in private_constants.py . class PrivateConstants: \"\"\" This class contains a set of constants for telemetrix internal use . \"\"\" # commands # send a loop back request - for debugging communications LOOP_COMMAND = 0 SET_PIN_MODE = 1 # set a pin to INPUT/OUTPUT/PWM/etc DIGITAL_WRITE = 2 # set a single digital pin value instead of entire port ANALOG_WRITE = 3 MODIFY_REPORTING = 4 GET_FIRMWARE_VERSION = 5 ARE_U_THERE = 6 # Arduino ID query for auto-detect of telemetrix connected boards SERVO_ATTACH = 7 SERVO_WRITE = 8 SERVO_DETACH = 9 I2C_BEGIN = 10 I2C_READ = 11 I2C_WRITE = 12 SONAR_NEW = 13 DHT_NEW = 14 #<-----------New Command For the DHT!!!!!!!!!!!!! STOP_ALL_REPORTS = 15 SET_ANALOG_SCANNING_INTERVAL = 16 Here the command DHT_NEW was added. 2. Define the maximum number of DHT devices to be supported. Add this value to private_contants.py # Maximum number of dht devices allowed MAX_DHTS = 6 3. Add storage to telemetrix.py to keeps track of the number of currently active DHT devices and their associated callback functions. self.dht_callbacks = {} self.dht_count = 0 The dht_callbacks dictionary uses the pin number for the DHT device as a key to retrieve its associated callback function. The dht_count variable keeps track of the currently active DHT devices. 4. Add a command method to telemetrix.py to command the server to add a new DHT device. def set_pin_mode_dht(self, pin, callback=None): \"\"\" :param pin: connection pin :param callback: callback function Error Callback: [Callback 0=DHT REPORT, DHT_ERROR=0, PIN, Error Number, Time] Valid Data Callback: Callback 0=DHT REPORT, DHT_DATA=1, PIN, Humidity, Temperature Time] \"\"\" if not callback: if self.shutdown_on_exception: self.shutdown() raise RuntimeError('set_pin_mode_dht: A Callback must be specified') if self.dht_count < PrivateConstants.MAX_DHTS - 1: self.dht_callbacks[pin] = callback self.dht_count += 1 command = [PrivateConstants.DHT_NEW, pin] self._send_command(command) else: if self.shutdown_on_exception: self.shutdown() raise RuntimeError(f'Maximum Number Of DHTs Exceeded - set_pin_mode_dht fails for pin {pin}') The name set_pin_mode_dht, was chosen to stay consistent with the telemetrix naming conventions. Because DHT devices generate reports, we ensure that the user specifies a callback function for the device. The callback is added to dht_callbacks, and the number of active DHT devices is incremented. If the maximum number of DHT devices is exceeded, a RuntimeError is raised. Otherwise, a command data packet is built and sent to the server. NOTE: The _send_command method will automatically calculate the packet length and append it to the packet.","title":"Adding A New Client Command"},{"location":"dht/#adding-a-new-server-command-handler","text":"1. Add the library to the list of #includes #include <Arduino.h> #include \"Telemetrix4Arduino.h\" #include <Servo.h> #include <Ultrasonic.h> #include <Wire.h> #include <dhtnew.h> // Adding dhtnew 2. Create A Name For The New Command Handler Function And Declare It As Extern // Create forward references for all the command handlers. // If you add a new command, you must add the command handler // here as well. extern void serial_loopback(); extern void set_pin_mode(); extern void digital_write(); extern void analog_write(); extern void modify_reporting(); extern void get_firmware_version(); extern void are_you_there(); extern void servo_attach(); extern void servo_write(); extern void servo_detach(); extern void i2c_begin(); extern void i2c_read(); extern void i2c_write(); extern void sonar_new(); extern void dht_new(); // The New Command Handler extern void stop_all_reports(); extern void set_analog_scanning_interval(); 3. Define A Value For The Command That Matches The Value Defined In The Client // Commands -received by this sketch // Add commands retaining the sequential numbering. // The order of commands here must be maintained in the command_table. #define SERIAL_LOOP_BACK 0 #define SET_PIN_MODE 1 #define DIGITAL_WRITE 2 #define ANALOG_WRITE 3 #define MODIFY_REPORTING 4 // mode(all, analog, or digital), pin, enable or disable #define GET_FIRMWARE_VERSION 5 #define ARE_U_THERE 6 #define SERVO_ATTACH 7 #define SERVO_WRITE 8 #define SERVO_DETACH 9 #define I2C_BEGIN 10 #define I2C_READ 11 #define I2C_WRITE 12 #define SONAR_NEW 13 #define DHT_NEW 14 // The Command value #define STOP_ALL_REPORTS 15 #define SET_ANALOG_SCANNING_INTERVAL 16 4. Update The Command Table With The New Command The data structures are provided below. To update the table, increase the size of the command_table to accept the new command. The command_table contains pointers to the command functions. Note that you may optionally specify the command without the & operator. The compiler interprets the entry the same way in both cases. The command value defined above, the value 14 for DHTNEW, acts as an index into the command_table when fetching the function pointer. Make sure to order the command_table appropriately. // When adding a new command update the command_table. // The command length is the number of bytes that follow // the command byte itself, and does not include the command // byte in its length. // The command_func is a pointer the command's function. struct command_descriptor { // a pointer to the command processing function void (*command_func)(void); }; // An array of pointers to the command functions // If you add new commands, make sure to extend the siz of this // array. command_descriptor command_table[17] = { {&serial_loopback}, {&set_pin_mode}, {&digital_write}, {&analog_write}, {&modify_reporting}, {&get_firmware_version}, {&are_you_there}, {&servo_attach}, {&servo_write}, {&servo_detach}, {&i2c_begin}, {&i2c_read}, {&i2c_write}, {&sonar_new}, {dht_new}, // The new function {stop_all_reports}, {set_analog_scanning_interval} }; 5. Create An Array Of DHT Descriptor Structures To Support The Feature #define MAX_DHTS 6 // max number of devices // DHT Descriptor struct DHT { uint8_t pin; unsigned int last_value; // this value is reserved for future use // if a report should be generated DHTNEW *dht_sensor; }; // an array of dht descriptor objects DHT dhts[MAX_DHTS]; byte dht_index = 0; // index into the dhts array 6. Create The Command Handler Function /*********************************** * DHT adding a new device **********************************/ void dht_new() { int d_read; // report consists of: // 0 - byte count // 1 - report type // 2 - dht report subtype // 3 - pin number // 4 - error value // pre-build an error report in case of a read error byte report_message[5] = {4, (byte)DHT_REPORT, (byte)DHT_READ_ERROR, (byte)0, (byte)0}; dhts[dht_index].dht_sensor = new DHTNEW((uint8_t)command_buffer[0]); dhts[dht_index].dht_sensor->setType(); dhts[dht_index].pin = command_buffer[0]; d_read = dhts[dht_index].dht_sensor->read(); // if read return == zero it means no errors. if (d_read == 0) { dht_index++; } else { // error found // send report and release the dht object report_message[3] = command_buffer[0]; // pin number report_message[4] = d_read; Serial.write(report_message, 5); delete (dhts[dht_index].dht_sensor); } } When a DHT is added, a read is performed to see if there are any issues with the device. If the read returns a zero, then there are no issues and nothing to report. However, a non-zero value is an error indicator. The error value is returned as a report.","title":"Adding A New Server Command Handler"},{"location":"dht/#add-a-new-server-function-to-continuously-monitor-the-device","text":"1. Create A Device Scanner Function For Active DHT Devices We are going to create the scan_dhts scanning function and then call the function in the loop section of the sketch. The scan_dhts function prebuilds a report_message buffer assuming that the read will return valid data. The format for the report is shown in the comments for the function. For valid data, the floating-point values are copied to the buffer as bytes, and a report is sent across the link. If an error is returned as a result of the read, byte 2 of the report, the report sub-type is changed from DHT_DATA to DHT_ERROR, and the packet length is changed to a value of 4 bytes. The report is then sent across the serial link. void scan_dhts() { // prebuild report for valid data // reuse the report if a read command fails // data returned is in floating point form - 4 bytes // each for humidity and temperature // byte 0 = packet length // byte 1 = report type // byte 2 = report sub type - DHT_DATA or DHT_ERROR // btye 3 = pin number // byte 4 = humidity high order byte for data or error value // byte 5 = humidity byte 2 // byte 6 = humidity byte 3 // byte 7 = humidity byte 4 // byte 8 = temperature high order byte for data or // byte 9 = temperature byte 2 // byte 10 = temperature byte 3 // byte 11 = temperature byte 4 byte report_message[12] = {11, DHT_REPORT, DHT_DATA, 0, 0, 0, 0, 0, 0, 0, 0, 0}; byte d_read; float dht_data; // are there any dhts to read? if (dht_index) { // is it time to do the read? This should occur every 2 seconds dht_current_millis = millis(); if (dht_current_millis - dht_previous_millis > dht_scan_interval) { // update for the next scan dht_previous_millis += dht_scan_interval; // read and report all the dht sensors for (int i = 0; i < dht_index; i++) { report_message[3] = dhts[i].pin; // get humidity dht_data = dhts[i].dht_sensor->getHumidity(); memcpy(&report_message[4], &dht_data, sizeof dht_data); // get temperature dht_data = dhts[i].dht_sensor->getTemperature(); memcpy(&report_message[8], &dht_data, sizeof dht_data); Serial.write(report_message, 12); // now read do a read for this device for next go around d_read = dhts[i].dht_sensor->read(); if (d_read) { // error found // send report //send_debug_info(1, 1); report_message[0] = 4; report_message[1] = DHT_REPORT; report_message[2] = DHT_READ_ERROR; report_message[3] = dhts[i].pin; // pin number report_message[4] = d_read; Serial.write(report_message, 5); } } } } } 2. Scan The Active DHT Sensors In The Sketch Loop Function void loop() { // keep processing incoming commands get_next_command(); if(! stop_reports){ // stop reporting scan_digital_inputs(); scan_analog_inputs(); scan_sonars(); scan_dhts(); scan the active DHT sensors. } }","title":"Add A New Server Function To Continuously Monitor The Device"},{"location":"dht/#add-a-new-client-report-handler","text":"1. Add An Entry For The DHT Report To The Report Dispatch Dictionary The report_dispatch dictionary uses report ID values as a key to look up the handler for the incoming report. The dictionary update method is used when adding a new entry into the dispatch dictionary. # The report_dispatch dictionary is used to process # incoming report messages by looking up the report message # and executing its associated processing method. self.report_dispatch = {} # To add a command to the command dispatch table, append here. self.report_dispatch.update({PrivateConstants.LOOP_COMMAND: self._report_loop_data}) self.report_dispatch.update({PrivateConstants.DEBUG_PRINT: self._report_debug_data}) self.report_dispatch.update({PrivateConstants.DIGITAL_REPORT: self._digital_message}) self.report_dispatch.update({PrivateConstants.ANALOG_REPORT: self._analog_message}) self.report_dispatch.update({PrivateConstants.FIRMWARE_REPORT: self._firmware_message}) self.report_dispatch.update({PrivateConstants.I_AM_HERE_REPORT: self._i_am_here}) self.report_dispatch.update({PrivateConstants.SERVO_UNAVAILABLE: self._servo_unavailable}) self.report_dispatch.update({PrivateConstants.I2C_READ_REPORT: self._i2c_read_report}) self.report_dispatch.update({PrivateConstants.I2C_TOO_FEW_BYTES_RCVD: self._i2c_too_few}) self.report_dispatch.update({PrivateConstants.I2C_TOO_MANY_BYTES_RCVD: self._i2c_too_many}) self.report_dispatch.update({PrivateConstants.SONAR_DISTANCE: self._sonar_distance_report}) self.report_dispatch.update({PrivateConstants.DHT_REPORT: self._dht_report}) 2. Create The Report Handler This function builds a report, and looks up the callback function for the DHT device using the reported pin number as the key and calls the callback function. def _dht_report(self, data): \"\"\" This is the dht report handler method. :param data: data[0] = report sub type - DHT_DATA or DHT_ERROR data[1] = pin number data[2] = humidity high order byte or error value if DHT_ERROR data[3] = humidity byte 2 data[4] = humidity byte 3 data[5] = humidity byte 4 data[6] = temperature high order byte for data data[7] = temperature byte 2 data[8] = temperature byte 3 data[9] = temperature byte 4 \"\"\" if data[0]: # DHT_ERROR # error report # data[0] = report sub type, data[1] = pin, data[2] = error message if self.dht_callbacks[data[1]]: # Callback 0=DHT REPORT, DHT_ERROR=0, PIN, Error Number, Time message = [PrivateConstants.DHT_REPORT, data[0], data[1], data[2], time.time()] self.dht_callbacks[data[1]](message) else: # got valid data DHT_DATA f_humidity = bytearray(data[2:6]) f_temperature = bytearray(data[6:]) message = [PrivateConstants.DHT_REPORT, data[0], data[1], (struct.unpack('<f', f_humidity))[0], (struct.unpack('<f', f_temperature))[0], time.time()] self.dht_callbacks[data[1]](message)","title":"Add a New Client Report Handler"},{"location":"enable_disable/","text":"Analog and Digital Input Pin Reporting Callback reporting begins immediately upon setting a pin as either a digital or analog input pin. If your application should unexpectedly exit without an orderly shutdown, the Arduino may continue to stream data, even though your application has exited. In this scenario, if you do not re-power the Arduino before restarting your application, the continuing data stream may cause pymata4 to fail because the data stream is out of sync with pymata4's state. One way of making sure that you do not encounter this scenario is to turn off reporting before exiting your application. disable_all_reporting def disable_all_reporting(self) Disable reporting for all digital and analog input pins Examples: telemetrix: digital_input.py telemetrix-aio: digital_input.py Notes: The code to run this command is commented out. Uncomment if you wish to try it. disable_analog_reporting def disable_analog_reporting(self, pin) Disables analog reporting for a single analog input. :param pin: Pin number. Examples: telemetrix: analog_input.py telemetrix-aio: analog_input.py Notes: The code to run this command is commented out. Uncomment if you wish to try it. disable_digital_reporting def disable_digital_reporting(self, pin) Disables digital reporting for a single digital input. :param pin: Pin number. Examples: telemetrix: digital_input.py telemetrix-aio: digital_input.py Notes: The code to run this command is commented out. Uncomment if you wish to try it. enable_analog_reporting def enable_analog_reporting(self, pin) Enables analog reporting for the specified pin. :param pin: Analog pin number. For example for A0, the number is 0. telemetrix: analog_input.py telemetrix-aio: analog_input.py enable_digital_reporting def enable_digital_reporting(self, pin) Enable reporting on the specified digital pin. :param pin: Pin number. Examples: telemetrix: digital_input.py telemetrix-aio: digital_input.py Notes: The code to run this command is commented out. Uncomment if you wish to try it. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Enabling/Disabling Analog And Digital Reporting"},{"location":"enable_disable/#analog-and-digital-input-pin-reporting","text":"Callback reporting begins immediately upon setting a pin as either a digital or analog input pin. If your application should unexpectedly exit without an orderly shutdown, the Arduino may continue to stream data, even though your application has exited. In this scenario, if you do not re-power the Arduino before restarting your application, the continuing data stream may cause pymata4 to fail because the data stream is out of sync with pymata4's state. One way of making sure that you do not encounter this scenario is to turn off reporting before exiting your application.","title":"Analog and Digital Input Pin  Reporting"},{"location":"enable_disable/#disable_all_reporting","text":"def disable_all_reporting(self) Disable reporting for all digital and analog input pins Examples: telemetrix: digital_input.py telemetrix-aio: digital_input.py Notes: The code to run this command is commented out. Uncomment if you wish to try it.","title":"disable_all_reporting"},{"location":"enable_disable/#disable_analog_reporting","text":"def disable_analog_reporting(self, pin) Disables analog reporting for a single analog input. :param pin: Pin number. Examples: telemetrix: analog_input.py telemetrix-aio: analog_input.py Notes: The code to run this command is commented out. Uncomment if you wish to try it.","title":"disable_analog_reporting"},{"location":"enable_disable/#disable_digital_reporting","text":"def disable_digital_reporting(self, pin) Disables digital reporting for a single digital input. :param pin: Pin number. Examples: telemetrix: digital_input.py telemetrix-aio: digital_input.py Notes: The code to run this command is commented out. Uncomment if you wish to try it.","title":"disable_digital_reporting"},{"location":"enable_disable/#enable_analog_reporting","text":"def enable_analog_reporting(self, pin) Enables analog reporting for the specified pin. :param pin: Analog pin number. For example for A0, the number is 0. telemetrix: analog_input.py telemetrix-aio: analog_input.py","title":"enable_analog_reporting"},{"location":"enable_disable/#enable_digital_reporting","text":"def enable_digital_reporting(self, pin) Enable reporting on the specified digital pin. :param pin: Pin number. Examples: telemetrix: digital_input.py telemetrix-aio: digital_input.py Notes: The code to run this command is commented out. Uncomment if you wish to try it. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"enable_digital_reporting"},{"location":"i2c/","text":"Communicating With I2C Devices Both telemetrix and telemetrix-aio have the capability to support two i2c buses. The default is always enabled. To enable the secondary bus, edit the Telemetrix4Arduino.ino file, and uncomment the following line: // uncomment out the next line to create a 2nd i2c port //#define SECOND_I2C_PORT #ifdef SECOND_I2C_PORT // Change the pins to match SDA and SCL for your board #define SECOND_I2C_PORT_SDA PB3 #define SECOND_I2C_PORT_SCL PB10 Make sure that the pin designations for the secondary port match those for your board. NOTE : Examples for i2c read and write may be found in these examples. telemetrix primary port: i2c_adxl345_accelerometer.py telemetrix secondary port: i2c_adxl345_accelerometer2.py telemetrix-aio primary port: i2c_adxl345_accelerometer.py telemetrix-aio secondary port: i2c_adxl345_accelerometer2.py Read Commands i2c_read def i2c_read(self, address, register, number_of_bytes, callback=None, i2c_port=0) Read the specified number of bytes from the specified register for the i2c device. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Required callback function to report i2c data as a result of read command :param i2c_port: 0 = default, 1 = secondary callback returns a data list: [I2C_READ_REPORT, address, register, count of data bytes, data bytes, time-stamp] Examples: See NOTE above. i2c_read_restart_transmission def i2c_read_restart_transmission(self, address, register, number_of_bytes, callback=None, i2c_port=0) Read the specified number of bytes from the specified register for the i2c device. This restarts the transmission after the read. It is required for some i2c devices such as the MMA8452Q accelerometer. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Required callback function to report i2c data as a result of read command :param i2c_port: 0 = default 1 = secondary callback returns a data list: [I2C_READ_REPORT, address, register, count of data bytes, data bytes, time-stamp] Examples: See NOTE above. Write Command i2c_write def i2c_write(self, address, args, i2c_port=0) Write data to an i2c device. :param address: i2c device address :param i2c_port: 0= port 1, 1 = port 2 :param args: A variable number of bytes to be sent to the device passed in as a list Examples: See NOTE above. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"I2C Reads And Writes"},{"location":"i2c/#communicating-with-i2c-devices","text":"Both telemetrix and telemetrix-aio have the capability to support two i2c buses. The default is always enabled. To enable the secondary bus, edit the Telemetrix4Arduino.ino file, and uncomment the following line: // uncomment out the next line to create a 2nd i2c port //#define SECOND_I2C_PORT #ifdef SECOND_I2C_PORT // Change the pins to match SDA and SCL for your board #define SECOND_I2C_PORT_SDA PB3 #define SECOND_I2C_PORT_SCL PB10 Make sure that the pin designations for the secondary port match those for your board. NOTE : Examples for i2c read and write may be found in these examples. telemetrix primary port: i2c_adxl345_accelerometer.py telemetrix secondary port: i2c_adxl345_accelerometer2.py telemetrix-aio primary port: i2c_adxl345_accelerometer.py telemetrix-aio secondary port: i2c_adxl345_accelerometer2.py","title":"Communicating With I2C Devices"},{"location":"i2c/#read-commands","text":"","title":"Read Commands"},{"location":"i2c/#i2c_read","text":"def i2c_read(self, address, register, number_of_bytes, callback=None, i2c_port=0) Read the specified number of bytes from the specified register for the i2c device. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Required callback function to report i2c data as a result of read command :param i2c_port: 0 = default, 1 = secondary callback returns a data list: [I2C_READ_REPORT, address, register, count of data bytes, data bytes, time-stamp] Examples: See NOTE above.","title":"i2c_read"},{"location":"i2c/#i2c_read_restart_transmission","text":"def i2c_read_restart_transmission(self, address, register, number_of_bytes, callback=None, i2c_port=0) Read the specified number of bytes from the specified register for the i2c device. This restarts the transmission after the read. It is required for some i2c devices such as the MMA8452Q accelerometer. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Required callback function to report i2c data as a result of read command :param i2c_port: 0 = default 1 = secondary callback returns a data list: [I2C_READ_REPORT, address, register, count of data bytes, data bytes, time-stamp] Examples: See NOTE above.","title":"i2c_read_restart_transmission"},{"location":"i2c/#write-command","text":"","title":"Write Command"},{"location":"i2c/#i2c_write","text":"def i2c_write(self, address, args, i2c_port=0) Write data to an i2c device. :param address: i2c device address :param i2c_port: 0= port 1, 1 = port 2 :param args: A variable number of bytes to be sent to the device passed in as a list Examples: See NOTE above. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"i2c_write"},{"location":"init/","text":"The Telemetrix and TelemetrixAIO Classes For the most part, these classes share a common API. Any differences are discussed in this section. To use either of these classes, you must first import it: Telemetrix Importing Telemetrix from telemetrix import telemetrix Instantiating Telemetrix board = telemetrix.Telemetrix() TelemetrixAIO Importing TelemetrixAIO from telemetrix_aio import telemetrix_aio Instantiating TelemetrixAIO board = telemetrix_aio.TelemetrixAIO() The board variable shown in both examples above contains a reference to the class instance. The instance variable is used to access any of the API methods for the class. For example, to cleanly shutdown your Telemetrix or TelemetrixAIO application, call the shutdown method as shown below: board.shutdown() Of course, you can name the instance variable, anything that is meaningful to you. There is nothing magic about the name board . Understanding The Telemetrix __init__ Parameters def __init__(self, com_port=None, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.000001, shutdown_on_exception=True) There are several optional parameters available to instantiate the Telemetrix class. Typically, one accepts all the default values. However, there are times when you may wish to take advantage of the flexibility provided by the __init__ method parameters, so let's explore the definition and purpose of each parameter: com_port The com_port parameter specifies a serial com_port, such as COM4 or '/dev/ttyACM0' used for PC to Arduino communication. If the default value of None is accepted, telemetrix will attempt to find the connected Arduino automatically. arduino_instance_id This parameter allows telemetrix to connect to an Arduino with a matching ID and is useful if you have multiple Arduino's plugged into your computer and you wish to have a specific Arduino selected by the application for connection. The default value for the arduino_instance_id for both telemetrix and Telemetrix4Arduino is 1. Instructions for changing the FirmataExpress value may be found in the Installing Telemetrix4Arduino section of this document. arduino_wait This parameter specifies the amount of time that telemtrix assumes it takes for an Arduino to reboot the Telemetrix4Arduino sketch from a power-up or reset. The default is 4 seconds. If the Arduino is not fully booted when com_port auto-discovery begins, auto-discovery will fail. sleep_tune This parameter is the sleep value expressed in seconds that is used at several strategic points in telemetrix. For example, the serial receiver continuously checks the serial port receive buffer for an available character to process. If there is no character in the buffer, telemetrix sleeps for the sleep_tune period before checking again. The default value is 0.000001 seconds. shutdown_on_exception When this parameter is set to True, the shutdown method is automatically called when an exception is detected, and all reporting is disabled. By setting this parameter to False, the Arduino may continue to send data to your application even after restarting it. The default is True and recommended to be used. Understanding The TelemetrixAIO __init__ Parameters def __init__(self, com_port=None, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.0001, autostart=True, loop=None, shutdown_on_exception=True, close_loop_on_shutdown=True, ): \"\"\" There are several optional parameters available to instantiate the Telemetrix class. Typically, one accepts all the default values. However, there are times when you may wish to take advantage of the flexibility provided by the __init__ method parameters, so let's explore the definition and purpose of each parameter: com_port The com_port parameter specifies a serial com_port, such as COM4 or '/dev/ttyACM0' used for PC to Arduino communication. If the default value of None is accepted, telemetrix_aio will attempt to find the connected Arduino automatically. arduino_instance_id This parameter allows telemetrix to connect to an Arduino with a matching ID and is useful if you have multiple Arduino's plugged into your computer and you wish to have a specific Arduino selected by the application for connection. The default value for the arduino_instance_id for both telemetrix and Telemetrix4Arduino is 1. Instructions for changing the FirmataExpress value may be found in the Installing Telemetrix4Arduino section of this document. arduino_wait This parameter specifies the amount of time that telemtrix assumes it takes for an Arduino to reboot the Telemetrix4Arduino sketch from a power-up or reset. The default is 4 seconds. If the Arduino is not fully booted when com_port auto-discovery begins, auto-discovery will fail. sleep_tune This parameter is the sleep value expressed in seconds that is used at several strategic points in telemetrix. For example, the serial receiver continuously checks the serial port receive buffer for an available character to process. If there is no character in the buffer, telemtrix_aio sleeps for the sleep_tune period before checking again. The default value is 0.000001 seconds. loop You may optionally specify a specific ayncio loop to use, or by accepting the default value of None, the default loop will be assigned for use. autostart When accepting the default value of True, Arduino auto-discovery is performed, and the report dispatcher task is started. If your application needs to delay these operations for any reason, set this parameter to False and then call start_aio to continue with autodiscovery and to start the report dispatcher task. shutdown_on_exception When this parameter is set to True, the shutdown method is automatically called when an exception is detected, and all reporting is disabled. By setting this parameter to False, the Arduino may continue to send data to your application even after restarting it. The default is True and recommended to be used. close_loop_on_shutdown The default for this parameter is True. If True, then when a shutdown occurs, the asyncio loop will be closed. If you wish to keep the loop active upon a telemetrix_aio shutdown, set this parameter to False. API Examples Telemetrix Each example on GitHub demonstrates instantiating the Telemetrix class. TelemetrixAIO Each example on GitHub demonstrates instantiating the TelemetrixAIO class. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"The __init__ Method"},{"location":"init/#the-telemetrix-and-telemetrixaio-classes","text":"For the most part, these classes share a common API. Any differences are discussed in this section. To use either of these classes, you must first import it:","title":"The Telemetrix and TelemetrixAIO Classes"},{"location":"init/#telemetrix","text":"","title":"Telemetrix"},{"location":"init/#importing-telemetrix","text":"from telemetrix import telemetrix","title":"Importing Telemetrix"},{"location":"init/#instantiating-telemetrix","text":"board = telemetrix.Telemetrix()","title":"Instantiating Telemetrix"},{"location":"init/#telemetrixaio","text":"","title":"TelemetrixAIO"},{"location":"init/#importing-telemetrixaio","text":"from telemetrix_aio import telemetrix_aio","title":"Importing TelemetrixAIO"},{"location":"init/#instantiating-telemetrixaio","text":"board = telemetrix_aio.TelemetrixAIO() The board variable shown in both examples above contains a reference to the class instance. The instance variable is used to access any of the API methods for the class. For example, to cleanly shutdown your Telemetrix or TelemetrixAIO application, call the shutdown method as shown below: board.shutdown() Of course, you can name the instance variable, anything that is meaningful to you. There is nothing magic about the name board .","title":"Instantiating TelemetrixAIO"},{"location":"init/#understanding-the-telemetrix-__init__-parameters","text":"def __init__(self, com_port=None, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.000001, shutdown_on_exception=True) There are several optional parameters available to instantiate the Telemetrix class. Typically, one accepts all the default values. However, there are times when you may wish to take advantage of the flexibility provided by the __init__ method parameters, so let's explore the definition and purpose of each parameter:","title":"Understanding The Telemetrix __init__ Parameters"},{"location":"init/#com_port","text":"The com_port parameter specifies a serial com_port, such as COM4 or '/dev/ttyACM0' used for PC to Arduino communication. If the default value of None is accepted, telemetrix will attempt to find the connected Arduino automatically.","title":"com_port"},{"location":"init/#arduino_instance_id","text":"This parameter allows telemetrix to connect to an Arduino with a matching ID and is useful if you have multiple Arduino's plugged into your computer and you wish to have a specific Arduino selected by the application for connection. The default value for the arduino_instance_id for both telemetrix and Telemetrix4Arduino is 1. Instructions for changing the FirmataExpress value may be found in the Installing Telemetrix4Arduino section of this document.","title":"arduino_instance_id"},{"location":"init/#arduino_wait","text":"This parameter specifies the amount of time that telemtrix assumes it takes for an Arduino to reboot the Telemetrix4Arduino sketch from a power-up or reset. The default is 4 seconds. If the Arduino is not fully booted when com_port auto-discovery begins, auto-discovery will fail.","title":"arduino_wait"},{"location":"init/#sleep_tune","text":"This parameter is the sleep value expressed in seconds that is used at several strategic points in telemetrix. For example, the serial receiver continuously checks the serial port receive buffer for an available character to process. If there is no character in the buffer, telemetrix sleeps for the sleep_tune period before checking again. The default value is 0.000001 seconds.","title":"sleep_tune"},{"location":"init/#shutdown_on_exception","text":"When this parameter is set to True, the shutdown method is automatically called when an exception is detected, and all reporting is disabled. By setting this parameter to False, the Arduino may continue to send data to your application even after restarting it. The default is True and recommended to be used.","title":"shutdown_on_exception"},{"location":"init/#understanding-the-telemetrixaio-__init__-parameters","text":"def __init__(self, com_port=None, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.0001, autostart=True, loop=None, shutdown_on_exception=True, close_loop_on_shutdown=True, ): \"\"\" There are several optional parameters available to instantiate the Telemetrix class. Typically, one accepts all the default values. However, there are times when you may wish to take advantage of the flexibility provided by the __init__ method parameters, so let's explore the definition and purpose of each parameter:","title":"Understanding The TelemetrixAIO __init__ Parameters"},{"location":"init/#com_port_1","text":"The com_port parameter specifies a serial com_port, such as COM4 or '/dev/ttyACM0' used for PC to Arduino communication. If the default value of None is accepted, telemetrix_aio will attempt to find the connected Arduino automatically.","title":"com_port"},{"location":"init/#arduino_instance_id_1","text":"This parameter allows telemetrix to connect to an Arduino with a matching ID and is useful if you have multiple Arduino's plugged into your computer and you wish to have a specific Arduino selected by the application for connection. The default value for the arduino_instance_id for both telemetrix and Telemetrix4Arduino is 1. Instructions for changing the FirmataExpress value may be found in the Installing Telemetrix4Arduino section of this document.","title":"arduino_instance_id"},{"location":"init/#arduino_wait_1","text":"This parameter specifies the amount of time that telemtrix assumes it takes for an Arduino to reboot the Telemetrix4Arduino sketch from a power-up or reset. The default is 4 seconds. If the Arduino is not fully booted when com_port auto-discovery begins, auto-discovery will fail.","title":"arduino_wait"},{"location":"init/#sleep_tune_1","text":"This parameter is the sleep value expressed in seconds that is used at several strategic points in telemetrix. For example, the serial receiver continuously checks the serial port receive buffer for an available character to process. If there is no character in the buffer, telemtrix_aio sleeps for the sleep_tune period before checking again. The default value is 0.000001 seconds.","title":"sleep_tune"},{"location":"init/#loop","text":"You may optionally specify a specific ayncio loop to use, or by accepting the default value of None, the default loop will be assigned for use.","title":"loop"},{"location":"init/#autostart","text":"When accepting the default value of True, Arduino auto-discovery is performed, and the report dispatcher task is started. If your application needs to delay these operations for any reason, set this parameter to False and then call start_aio to continue with autodiscovery and to start the report dispatcher task.","title":"autostart"},{"location":"init/#shutdown_on_exception_1","text":"When this parameter is set to True, the shutdown method is automatically called when an exception is detected, and all reporting is disabled. By setting this parameter to False, the Arduino may continue to send data to your application even after restarting it. The default is True and recommended to be used.","title":"shutdown_on_exception"},{"location":"init/#close_loop_on_shutdown","text":"The default for this parameter is True. If True, then when a shutdown occurs, the asyncio loop will be closed. If you wish to keep the loop active upon a telemetrix_aio shutdown, set this parameter to False.","title":"close_loop_on_shutdown"},{"location":"init/#api-examples","text":"","title":"API Examples"},{"location":"init/#telemetrix_1","text":"Each example on GitHub demonstrates instantiating the Telemetrix class.","title":"Telemetrix"},{"location":"init/#telemetrixaio_1","text":"Each example on GitHub demonstrates instantiating the TelemetrixAIO class. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"TelemetrixAIO"},{"location":"install_telemetrix-aio/","text":"Before You Install Please see the Verifying/Installing Python section of this document to verify or install the correct version of Python for your computer. Installing Telemetrix-AIO To install telemetrix-aio on Linux (including Raspberry Pi) and macOS computers, open a terminal window and type: sudo pip3 install telemetrix-aio For Windows users type: pip install telemetrix-aio You can find the code for telemetrix-aio on this GitHub repository. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Installing Telemetrix-AIO"},{"location":"install_telemetrix-aio/#before-you-install","text":"Please see the Verifying/Installing Python section of this document to verify or install the correct version of Python for your computer.","title":"Before You Install"},{"location":"install_telemetrix-aio/#installing-telemetrix-aio","text":"To install telemetrix-aio on Linux (including Raspberry Pi) and macOS computers, open a terminal window and type: sudo pip3 install telemetrix-aio For Windows users type: pip install telemetrix-aio You can find the code for telemetrix-aio on this GitHub repository. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Installing Telemetrix-AIO"},{"location":"install_telemetrix/","text":"Before You Install Please see the Verifying/Installing Python section of this document to verify or install the correct version of Python for your computer. Installing Telemetrix To install telemetrix on Linux (including Raspberry Pi) and macOS computers, open a terminal window and type: sudo pip3 install telemetrix For Windows users, type: pip install telemetrix You can find the code for telemetrix on this GitHub repository. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Installing Telemetrix"},{"location":"install_telemetrix/#before-you-install","text":"Please see the Verifying/Installing Python section of this document to verify or install the correct version of Python for your computer.","title":"Before You Install"},{"location":"install_telemetrix/#installing-telemetrix","text":"To install telemetrix on Linux (including Raspberry Pi) and macOS computers, open a terminal window and type: sudo pip3 install telemetrix For Windows users, type: pip install telemetrix You can find the code for telemetrix on this GitHub repository. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Installing Telemetrix"},{"location":"license/","text":"GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU Affero General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Remote Network Interaction; Use with the GNU General Public License. Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see http://www.gnu.org/licenses/ .","title":"License"},{"location":"management/","text":"Cleanly Shutting Down shutdown You should always call the shutdown method to cleanly exit your application and to assure that any streaming data coming from the Arduino-core device is halted. def shutdown(self) This method attempts an orderly shutdown. If any exceptions are thrown, they are ignored. Examples: All the examples call shutdown. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Shutting Down"},{"location":"management/#cleanly-shutting-down","text":"","title":"Cleanly Shutting Down"},{"location":"management/#shutdown","text":"You should always call the shutdown method to cleanly exit your application and to assure that any streaming data coming from the Arduino-core device is halted. def shutdown(self) This method attempts an orderly shutdown. If any exceptions are thrown, they are ignored. Examples: All the examples call shutdown. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"shutdown"},{"location":"pin_modes/","text":"Introduction A pin on an Arduino-core device can be configured to operate in one of several modes. For example, a digital pin may be configured for input, output, and some digital pins may be used for analog output (PWM) operation. Analog input pins are even more flexible. They may be configured for analog input, digital input, or digital output operation. Mapping Analog Pin Numbers To Digital Pin Numbers When configuring an analog input pin as a digital input, you must use the pin's digital pin number equivalent. For example, if you wish to use pin A0 as a digital pin on an Arduino Uno, the digital pin number equivalent is 14. In general, to find the digital equivalent of pin A0 for your specific Arduino board type, the algorithm is: digital_pin_number = analog_pin_number + number of digital pins Looking at the Uno: A0 = 14, A1 = 15, and so forth. Looking at a Mega2560 which has 54 digital pins: A0 = 54, A1 = 55, etc. However, this not always the case, so please consult the documentation for the board in use. Both telemetrix and telemetrix-aio require that a pin's mode be explicitly set by calling one of the mode-setting methods before using a pin. In this section, the methods to set pin modes are presented. For each API method, a link to an example is provided. The API parameters for both telemetrix and telemetrix-aio are identical for setting pin modes, except telemetrix-aio method definitions are prefixed with the Python async keyword. Setting Pin Modes set_pin_mode_analog_input def set_pin_mode_analog_input(self, pin_number, callback=None, differential=0) Set a pin as an analog input. :param pin_number: arduino pin number :param callback: callback function :param differential: When comparing the previous value and the current value, if the difference exceeds the differential. This value needs to be equaled or exceeded for a callback report to be generated. callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for analog input pins = 2 Examples: telemetrix: analog_input.py telemtrix-aio: analog_input.py Notes: Both telemetrix and telemetrix-aio refer to analog pins using the numeric portion of the pin number only. For example, pin A3 is referred to as pin 3. Data reporting via callbacks for this pin begins immediately after this method is called. set_pin_mode_analog_output This mode is used to place a digital pin into PWM output mode. Arduino refers to this mode of operation as analog output mode. ```python def set_pin_mode_analog_output(self, pin_number) Set a pin as an analog input. :param pin_number: arduino pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for analog input pins = 2 Examples: telemetrix: fade.py telemetrix-aio: fade.py Notes: Only specific digital pins support this mode. Check with the Arduino documentation for your board to determine which pins support PWM. set_pin_mode_dht When this method is called, a check for a valid DHT device is made. A report is generated and sent back through the callback, indicating that a DHT device was found or an error occurred. def set_pin_mode_dht(self, pin, callback=None) This method sets a pin as a DHT22 pin :param pin: dht22 pin :param callback: callback function Error Callback: [Callback 0=DHT REPORT, DHT_ERROR=0, PIN, Error Number, Time] Valid Data Callback: Callback 0=DHT REPORT, DHT_DATA=1, PIN, Humidity, Temperature Time] Examples: telemetrix: dht.py telemetric-aio: dht.py set_pin_mode_digital_input def set_pin_mode_digital_input(self, pin_number, callback=None) Set a pin as a digital input. :param pin_number: arduino pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins = 0 Examples: telemetrix: digital_input.py telemetrix-aio: digital_input_debounce.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called. set_pin_mode_digital_input_pullup def set_pin_mode_digital_input_pullup(self, pin_number, callback=None) Set a pin as a digital input with pullup enabled. :param pin_number: arduino pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 11 Example: telemetrix: digital_input.py telemetrix-aio: digital_input.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called. set_pin_mode_digital_output def set_pin_mode_digital_output(self, pin_number) Set a pin as a digital output pin. :param pin_number: arduino pin number Examples: telemetrix: blink.py telemetrix-aio: blink.py set_pin_mode_i2c ddef set_pin_mode_i2c(self, i2c_port=0): \"\"\" Establish the standard Arduino i2c pins for i2c utilization. :param i2c_port: 0 = i2c1, 1 = i2c2 Some Arduino-core boards support a secondary i2c port. This parameter selects the port. Both ports may be active. The secondary port needs to be enabled by enabling a #ifdef in the Telemetrix4Arduino sketch. NOTES: 1. THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE 2. Callbacks are set within the individual i2c read methods of this API. See i2c_read, or i2c_read_restart_transmission. \"\"\" Examples: telemetrix: primary i2c port i2c_adxl345_accelerometer.py telemetrix: secondary i2c port i2c_adxl345_accelerometer2.py telemetrix-aio : primary i2c port i2c_adxl345_accelerometer.py telemetrix-aio : secondary i2c port i2c_adxl345_accelerometer2.py set_pin_mode_servo def set_pin_mode_servo(self, pin_number, min_pulse=544, max_pulse=2400) Attach a pin to a servo motor :param pin_number: pin :param min_pulse: minimum pulse width :param max_pulse: maximum pulse width Examples: telemetrix: servo.py telemetrix-aio: servo.py servo_detach def servo_detach(self, pin_number) Detach a servo for reuse :param pin_number: attached pin Examples: telemetrix: servo telemetrix-aio: servo set_pin_mode_sonar def set_pin_mode_sonar(self, trigger_pin, echo_pin, callback=None) :param trigger_pin: :param echo_pin: :param callback: callback callback data: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp] Examples: telemetrix: hc-sr04_distance_sensor.py telemetrix-aio: hc-sr04_distance_sensor.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Setting Pin Modes"},{"location":"pin_modes/#introduction","text":"A pin on an Arduino-core device can be configured to operate in one of several modes. For example, a digital pin may be configured for input, output, and some digital pins may be used for analog output (PWM) operation. Analog input pins are even more flexible. They may be configured for analog input, digital input, or digital output operation.","title":"Introduction"},{"location":"pin_modes/#mapping-analog-pin-numbers-to-digital-pin-numbers","text":"When configuring an analog input pin as a digital input, you must use the pin's digital pin number equivalent. For example, if you wish to use pin A0 as a digital pin on an Arduino Uno, the digital pin number equivalent is 14. In general, to find the digital equivalent of pin A0 for your specific Arduino board type, the algorithm is: digital_pin_number = analog_pin_number + number of digital pins Looking at the Uno: A0 = 14, A1 = 15, and so forth. Looking at a Mega2560 which has 54 digital pins: A0 = 54, A1 = 55, etc. However, this not always the case, so please consult the documentation for the board in use. Both telemetrix and telemetrix-aio require that a pin's mode be explicitly set by calling one of the mode-setting methods before using a pin. In this section, the methods to set pin modes are presented. For each API method, a link to an example is provided. The API parameters for both telemetrix and telemetrix-aio are identical for setting pin modes, except telemetrix-aio method definitions are prefixed with the Python async keyword.","title":"Mapping Analog Pin Numbers To Digital Pin Numbers"},{"location":"pin_modes/#setting-pin-modes","text":"","title":"Setting Pin Modes"},{"location":"pin_modes/#set_pin_mode_analog_input","text":"def set_pin_mode_analog_input(self, pin_number, callback=None, differential=0) Set a pin as an analog input. :param pin_number: arduino pin number :param callback: callback function :param differential: When comparing the previous value and the current value, if the difference exceeds the differential. This value needs to be equaled or exceeded for a callback report to be generated. callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for analog input pins = 2 Examples: telemetrix: analog_input.py telemtrix-aio: analog_input.py Notes: Both telemetrix and telemetrix-aio refer to analog pins using the numeric portion of the pin number only. For example, pin A3 is referred to as pin 3. Data reporting via callbacks for this pin begins immediately after this method is called.","title":"set_pin_mode_analog_input"},{"location":"pin_modes/#set_pin_mode_analog_output","text":"This mode is used to place a digital pin into PWM output mode. Arduino refers to this mode of operation as analog output mode. ```python def set_pin_mode_analog_output(self, pin_number) Set a pin as an analog input. :param pin_number: arduino pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for analog input pins = 2 Examples: telemetrix: fade.py telemetrix-aio: fade.py Notes: Only specific digital pins support this mode. Check with the Arduino documentation for your board to determine which pins support PWM.","title":"set_pin_mode_analog_output"},{"location":"pin_modes/#set_pin_mode_dht","text":"When this method is called, a check for a valid DHT device is made. A report is generated and sent back through the callback, indicating that a DHT device was found or an error occurred. def set_pin_mode_dht(self, pin, callback=None) This method sets a pin as a DHT22 pin :param pin: dht22 pin :param callback: callback function Error Callback: [Callback 0=DHT REPORT, DHT_ERROR=0, PIN, Error Number, Time] Valid Data Callback: Callback 0=DHT REPORT, DHT_DATA=1, PIN, Humidity, Temperature Time] Examples: telemetrix: dht.py telemetric-aio: dht.py","title":"set_pin_mode_dht"},{"location":"pin_modes/#set_pin_mode_digital_input","text":"def set_pin_mode_digital_input(self, pin_number, callback=None) Set a pin as a digital input. :param pin_number: arduino pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins = 0 Examples: telemetrix: digital_input.py telemetrix-aio: digital_input_debounce.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called.","title":"set_pin_mode_digital_input"},{"location":"pin_modes/#set_pin_mode_digital_input_pullup","text":"def set_pin_mode_digital_input_pullup(self, pin_number, callback=None) Set a pin as a digital input with pullup enabled. :param pin_number: arduino pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 11 Example: telemetrix: digital_input.py telemetrix-aio: digital_input.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called.","title":"set_pin_mode_digital_input_pullup"},{"location":"pin_modes/#set_pin_mode_digital_output","text":"def set_pin_mode_digital_output(self, pin_number) Set a pin as a digital output pin. :param pin_number: arduino pin number Examples: telemetrix: blink.py telemetrix-aio: blink.py","title":"set_pin_mode_digital_output"},{"location":"pin_modes/#set_pin_mode_i2c","text":"ddef set_pin_mode_i2c(self, i2c_port=0): \"\"\" Establish the standard Arduino i2c pins for i2c utilization. :param i2c_port: 0 = i2c1, 1 = i2c2 Some Arduino-core boards support a secondary i2c port. This parameter selects the port. Both ports may be active. The secondary port needs to be enabled by enabling a #ifdef in the Telemetrix4Arduino sketch. NOTES: 1. THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE 2. Callbacks are set within the individual i2c read methods of this API. See i2c_read, or i2c_read_restart_transmission. \"\"\" Examples: telemetrix: primary i2c port i2c_adxl345_accelerometer.py telemetrix: secondary i2c port i2c_adxl345_accelerometer2.py telemetrix-aio : primary i2c port i2c_adxl345_accelerometer.py telemetrix-aio : secondary i2c port i2c_adxl345_accelerometer2.py","title":"set_pin_mode_i2c"},{"location":"pin_modes/#set_pin_mode_servo","text":"def set_pin_mode_servo(self, pin_number, min_pulse=544, max_pulse=2400) Attach a pin to a servo motor :param pin_number: pin :param min_pulse: minimum pulse width :param max_pulse: maximum pulse width Examples: telemetrix: servo.py telemetrix-aio: servo.py","title":"set_pin_mode_servo"},{"location":"pin_modes/#servo_detach","text":"def servo_detach(self, pin_number) Detach a servo for reuse :param pin_number: attached pin Examples: telemetrix: servo telemetrix-aio: servo","title":"servo_detach"},{"location":"pin_modes/#set_pin_mode_sonar","text":"def set_pin_mode_sonar(self, trigger_pin, echo_pin, callback=None) :param trigger_pin: :param echo_pin: :param callback: callback callback data: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp] Examples: telemetrix: hc-sr04_distance_sensor.py telemetrix-aio: hc-sr04_distance_sensor.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"set_pin_mode_sonar"},{"location":"python_3_verify/","text":"How To Verify The Python 3 Version Installed To check that you have the correct version of Python 3 installed, open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.9.0 (tags/v3.9.0:9cf6752, Oct 5 2020, 15:34:40) [MSC v.1927 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> If you need to install Python 3, please go to the next section. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Verifying Python 3 Version"},{"location":"python_3_verify/#how-to-verify-the-python-3-version-installed","text":"To check that you have the correct version of Python 3 installed, open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.9.0 (tags/v3.9.0:9cf6752, Oct 5 2020, 15:34:40) [MSC v.1927 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> If you need to install Python 3, please go to the next section. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"How To Verify The Python 3 Version Installed"},{"location":"python_install/","text":"INSTALLING PYTHON Windows Users You must use Python 3.8.3 or greater To install Python 3, go to the Python home page, and download the latest Python 3 distribution for your operating system. During the installation process, if there is a checkbox to add Python 3.x to your path, make sure it is checked before proceeding with the installation. Linux Users Python 3.7.2 or greater is required. Raspberry Pi Raspbian Users If your copy of Raspbian is using Python 3.7 or greater, you should be all set to proceed. Ubuntu and Other Debian Based Linux Distributions You may need to install pip3. To check, open a terminal and type: which pip3 If a path to pip3 is not reported, you will need to install it. Open a terminal window and type: sudo apt-get install pip3-python You should then make sure you have the latest version by typing: sudo pip3 install -U pip For All Other Linux Distributions Refer to your distribution's instructions. Mac Users Python 3.7.2 or greater is required. Install Python 3.7.x from https://www.python.org/downloads/ or via homebrew Download get-pip.py from https://bootstrap.pypa.io/get-pip.py and install (this should already be installed if Python was installed from python.org or homebrew): curl -O https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py Verify The Python Installation Use the procedure shown here to verify that you have successfully installed the correct version of Python for your computer. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Python 3 Installation"},{"location":"python_install/#installing-python","text":"","title":"INSTALLING PYTHON"},{"location":"python_install/#windows-users","text":"You must use Python 3.8.3 or greater To install Python 3, go to the Python home page, and download the latest Python 3 distribution for your operating system. During the installation process, if there is a checkbox to add Python 3.x to your path, make sure it is checked before proceeding with the installation.","title":"Windows Users"},{"location":"python_install/#linux-users","text":"Python 3.7.2 or greater is required.","title":"Linux Users"},{"location":"python_install/#raspberry-pi-raspbian-users","text":"If your copy of Raspbian is using Python 3.7 or greater, you should be all set to proceed.","title":"Raspberry Pi Raspbian Users"},{"location":"python_install/#ubuntu-and-other-debian-based-linux-distributions","text":"You may need to install pip3. To check, open a terminal and type: which pip3 If a path to pip3 is not reported, you will need to install it. Open a terminal window and type: sudo apt-get install pip3-python You should then make sure you have the latest version by typing: sudo pip3 install -U pip","title":"Ubuntu and Other Debian Based Linux Distributions"},{"location":"python_install/#for-all-other-linux-distributions","text":"Refer to your distribution's instructions.","title":"For All Other Linux Distributions"},{"location":"python_install/#mac-users","text":"Python 3.7.2 or greater is required. Install Python 3.7.x from https://www.python.org/downloads/ or via homebrew Download get-pip.py from https://bootstrap.pypa.io/get-pip.py and install (this should already be installed if Python was installed from python.org or homebrew): curl -O https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py","title":"Mac Users"},{"location":"python_install/#verify-the-python-installation","text":"Use the procedure shown here to verify that you have successfully installed the correct version of Python for your computer. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Verify The Python Installation"},{"location":"telemetrix4arduino/","text":"Telemtrix4Arduino Installation Instructions 1. Open the Arduino IDE and select Tools/Manage Libraries. 2. Enter \"Telemtrix4Arduino in the search box. 3. Click on the Install button. You will be prompted to allow the installation of additional libraries. Accept the installation for all. 4. Upload Telemetrix4Arduino to your Arduino-Core board by selecting File/Examples/Telemetrix4Arduino/Telemetrix4Arduino and then clicking the upload button on the IDE. Setting The Telemetrix4Arduino Instance ID Telemetrix4Arduino, in conjunction with the Telemetrix Project clients, associates a specific Arduino board with your application. If you only have a single Arduino connected at a time, you do not need to do anything. However, if you wish to run multiple Arduinos, you will need to assign a unique ID number to each Arduino. The ID number is then supplied as an input parameter when your application is instantiated. Note that for the server, if you wish to change the instance_id, you must edit the sketch code and upload the changes to the Arduino. To match the instance_id on the client side, you will need to specify the arduino_instance id parameter when instantiating the client class: def __init__(self, com_port=None, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.000001, shutdown_on_exception=True) Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Installing Telemetrix4Arduino"},{"location":"telemetrix4arduino/#telemtrix4arduino","text":"","title":"Telemtrix4Arduino"},{"location":"telemetrix4arduino/#installation-instructions","text":"1. Open the Arduino IDE and select Tools/Manage Libraries. 2. Enter \"Telemtrix4Arduino in the search box. 3. Click on the Install button. You will be prompted to allow the installation of additional libraries. Accept the installation for all. 4. Upload Telemetrix4Arduino to your Arduino-Core board by selecting File/Examples/Telemetrix4Arduino/Telemetrix4Arduino and then clicking the upload button on the IDE.","title":"Installation Instructions"},{"location":"telemetrix4arduino/#setting-the-telemetrix4arduino-instance-id","text":"Telemetrix4Arduino, in conjunction with the Telemetrix Project clients, associates a specific Arduino board with your application. If you only have a single Arduino connected at a time, you do not need to do anything. However, if you wish to run multiple Arduinos, you will need to assign a unique ID number to each Arduino. The ID number is then supplied as an input parameter when your application is instantiated. Note that for the server, if you wish to change the instance_id, you must edit the sketch code and upload the changes to the Arduino. To match the instance_id on the client side, you will need to specify the arduino_instance id parameter when instantiating the client class: def __init__(self, com_port=None, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.000001, shutdown_on_exception=True) Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Setting The Telemetrix4Arduino Instance ID"},{"location":"telemtrix4arduinoSAVE/","text":"FirmataExpress Installation Instructions 1. Open the Arduino IDE and select Tools/Manage Libraries. 2. Enter \"FirmataExpress in the search box. 3. Click on the Install button. 4. FirmataExpress also requires that the Ultrasonic library by Erick Sim\u00f5es be installed. Using the Arduino IDE, install the ultrasonic library . Click on Tools/Manage Libraries and select Ultrasonic and then click Install. When pymata4 is instantiated, the version of FirmataExpress is checked for compatibility. If an incompatible version is found, a RuntimeError exception will be raised. The correct version to be used is identified and printed on the console. Setting The FirmataExpress Instance ID FirmataExpress, in conjunction with pymata4, has the ability to automatically associate a Pymata Express application with a specific Arduino board plugged into your computer. If you only have a single Arduino connected at a time, you do not need to do anything. However, if you wish to run multiple Arduinos, you will need to assign a unique ID number to each Arduino. The ID number is then supplied as an input parameter when your application is instantiated. The Pymata Express instance parameter is discussed here . To set the ID number in FirmataExpress, load the FirmataExpress sketch into the Arduino IDE. Look for the following line: #define ARDUINO_INSTANCE_ID 1 Modify the value of 1 to the matching number you will use with Pymata Express. You may then compile and upload FirmataExpress to your Arduino. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"FirmataExpress"},{"location":"telemtrix4arduinoSAVE/#firmataexpress","text":"","title":"FirmataExpress"},{"location":"telemtrix4arduinoSAVE/#installation-instructions","text":"1. Open the Arduino IDE and select Tools/Manage Libraries. 2. Enter \"FirmataExpress in the search box. 3. Click on the Install button. 4. FirmataExpress also requires that the Ultrasonic library by Erick Sim\u00f5es be installed. Using the Arduino IDE, install the ultrasonic library . Click on Tools/Manage Libraries and select Ultrasonic and then click Install. When pymata4 is instantiated, the version of FirmataExpress is checked for compatibility. If an incompatible version is found, a RuntimeError exception will be raised. The correct version to be used is identified and printed on the console.","title":"Installation Instructions"},{"location":"telemtrix4arduinoSAVE/#setting-the-firmataexpress-instance-id","text":"FirmataExpress, in conjunction with pymata4, has the ability to automatically associate a Pymata Express application with a specific Arduino board plugged into your computer. If you only have a single Arduino connected at a time, you do not need to do anything. However, if you wish to run multiple Arduinos, you will need to assign a unique ID number to each Arduino. The ID number is then supplied as an input parameter when your application is instantiated. The Pymata Express instance parameter is discussed here . To set the ID number in FirmataExpress, load the FirmataExpress sketch into the Arduino IDE. Look for the following line: #define ARDUINO_INSTANCE_ID 1 Modify the value of 1 to the matching number you will use with Pymata Express. You may then compile and upload FirmataExpress to your Arduino. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Setting The FirmataExpress Instance ID"},{"location":"upgrade/","text":"Getting Notifications Of A New Release And How To Upgrade Get Notifications For New Releases From Github If you have an account on GitHub, you can enable automatic notification when a new release is published. If you don't have an account, you may create one on the GitHub site. To enable automatic notifications, go to the telemetrix or telemetrix-aio repository page, click on the drop-down list, and select \"Releases Only.\" When a new release is published, you will receive an email from GitHub. Upgrading To The Latest Version Whenever a new release is published, it is available on the Python Package Index (PyPI). To upgrade telemetrix, open a terminal window. For Windows users, type: pip install telemetrix --upgrade For Linux and macOS users, type: sudo pip3 install telemetrix --upgrade To upgrade telemetrix-aio, open a terminal window. For Windows users, type: pip install telemetrix-aio --upgrade For Linux and macOS users, type: sudo pip3 install telemetrix-aio --upgrade Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Upgrading To The Latest Version Python Clients"},{"location":"upgrade/#getting-notifications-of-a-new-release-and-how-to-upgrade","text":"","title":"Getting Notifications Of A New Release And How To Upgrade"},{"location":"upgrade/#get-notifications-for-new-releases-from-github","text":"If you have an account on GitHub, you can enable automatic notification when a new release is published. If you don't have an account, you may create one on the GitHub site. To enable automatic notifications, go to the telemetrix or telemetrix-aio repository page, click on the drop-down list, and select \"Releases Only.\" When a new release is published, you will receive an email from GitHub.","title":"Get Notifications For New Releases From Github"},{"location":"upgrade/#upgrading-to-the-latest-version","text":"Whenever a new release is published, it is available on the Python Package Index (PyPI). To upgrade telemetrix, open a terminal window. For Windows users, type: pip install telemetrix --upgrade For Linux and macOS users, type: sudo pip3 install telemetrix --upgrade To upgrade telemetrix-aio, open a terminal window. For Windows users, type: pip install telemetrix-aio --upgrade For Linux and macOS users, type: sudo pip3 install telemetrix-aio --upgrade Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Upgrading To The Latest Version"}]}